@page "/updateContact/{id}"
@using Asp.Net_Core_Mod_5.Shared
@using BlazorAppMod7.ContactsBlazor.Services
@inject IContactService ContactService
@inject NavigationManager NavigationManager

<h3>Update Contact</h3>

@if (Contact == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@Contact" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="FirstName">First Name:</label>
        <InputText id="FirstName" class="form-control" @bind-Value="Contact.FirstName" />
        <ValidationMessage For="@(() => Contact.FirstName)" />
    </div>

    <div class="form-group">
        <label for="LastName">Last Name:</label>
        <InputText id="LastName" class="form-control" @bind-Value="Contact.LastName" />
        <ValidationMessage For="@(() => Contact.LastName)" />
    </div>

    <div class="form-group">
        <label for="PhoneNumber">Phone Number:</label>
        <InputText id="PhoneNumber" class="form-control" @bind-Value="Contact.PhoneNumber" />
    </div>

    <div class="form-group">
        <label for="BirthDate">Birth Date:</label>
        <InputDate id="BirthDate" class="form-control" @bind-Value="Contact.BirthDate" />
    </div>

    <button type="submit" class="btn btn-primary">Save Changes</button>
    <button type="button" class="btn btn-secondary" @onclick="NavigateToContacts">Cancel</button>
</EditForm>
<button class="btn btn-danger mt-3" @onclick="HandleDelete">Delete Contact</button>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private ContactResponseDto.ContactDto Contact;

    protected override async Task OnInitializedAsync()
    {
        var guidId = Guid.Parse(Id);
        Contact = await ContactService.GetContactById(guidId);
    }

    private async Task HandleValidSubmit()
    {
        var guidId = Guid.Parse(Id);
        await ContactService.UpdateContact(guidId, Contact);
        NavigationManager.NavigateTo("/contacts");
    }

    private void NavigateToContacts()
    {
        NavigationManager.NavigateTo("/contacts");
    }
    private async Task HandleDelete()
    {
        Guid guidId = Guid.Parse(Id);
        await ContactService.DeleteContact(guidId);
        NavigationManager.NavigateTo("/contacts");
    }
}
